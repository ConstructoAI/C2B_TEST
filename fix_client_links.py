"""
Script pour r√©parer et v√©rifier les liens clients avec tokens
Restaure l'acc√®s aux liens de validation client
"""

import sqlite3
import os
import sys
from datetime import datetime

# Configuration
DATABASE_MULTI = 'data/soumissions_multi.db'
DATABASE_HERITAGE = 'data/soumissions_heritage.db'
BASE_URL = 'https://c2b-heritage.onrender.com'  # Modifier selon votre URL

def check_databases():
    """V√©rifie l'existence des bases de donn√©es"""
    print("=" * 60)
    print("V√âRIFICATION DES BASES DE DONN√âES")
    print("=" * 60)
    
    if os.path.exists(DATABASE_MULTI):
        print(f"‚úÖ Base Multi-format trouv√©e: {DATABASE_MULTI}")
        size = os.path.getsize(DATABASE_MULTI) / 1024 / 1024
        print(f"   Taille: {size:.2f} MB")
    else:
        print(f"‚ùå Base Multi-format non trouv√©e: {DATABASE_MULTI}")
    
    if os.path.exists(DATABASE_HERITAGE):
        print(f"‚úÖ Base Heritage trouv√©e: {DATABASE_HERITAGE}")
        size = os.path.getsize(DATABASE_HERITAGE) / 1024 / 1024
        print(f"   Taille: {size:.2f} MB")
    else:
        print(f"‚ùå Base Heritage non trouv√©e: {DATABASE_HERITAGE}")
    
    print()

def list_all_tokens():
    """Liste tous les tokens existants dans les deux bases"""
    all_tokens = []
    
    # Tokens de la base Multi-format
    if os.path.exists(DATABASE_MULTI):
        try:
            conn = sqlite3.connect(DATABASE_MULTI)
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT token, numero_soumission, nom_client, nom_projet, statut, date_creation 
                FROM soumissions 
                WHERE token IS NOT NULL
                ORDER BY date_creation DESC
            ''')
            
            multi_tokens = cursor.fetchall()
            conn.close()
            
            for token, numero, client, projet, statut, date in multi_tokens:
                all_tokens.append({
                    'source': 'Multi-format',
                    'token': token,
                    'numero': numero,
                    'client': client,
                    'projet': projet,
                    'statut': statut,
                    'date': date,
                    'url': f"{BASE_URL}/?token={token}"
                })
            
            print(f"üìã {len(multi_tokens)} soumissions avec tokens dans Multi-format")
        except Exception as e:
            print(f"‚ùå Erreur lecture Multi-format: {e}")
    
    # Tokens de la base Heritage
    if os.path.exists(DATABASE_HERITAGE):
        try:
            conn = sqlite3.connect(DATABASE_HERITAGE)
            cursor = conn.cursor()
            
            # V√©rifier si la colonne token existe
            cursor.execute("PRAGMA table_info(soumissions_heritage)")
            columns = [col[1] for col in cursor.fetchall()]
            
            if 'token' in columns:
                cursor.execute('''
                    SELECT token, numero, client_nom, projet_nom, statut, created_at 
                    FROM soumissions_heritage 
                    WHERE token IS NOT NULL
                    ORDER BY created_at DESC
                ''')
                
                heritage_tokens = cursor.fetchall()
                
                for token, numero, client, projet, statut, date in heritage_tokens:
                    all_tokens.append({
                        'source': 'Heritage',
                        'token': token,
                        'numero': numero,
                        'client': client,
                        'projet': projet,
                        'statut': statut,
                        'date': date,
                        'url': f"{BASE_URL}/?token={token}"
                    })
                
                print(f"üìã {len(heritage_tokens)} soumissions avec tokens dans Heritage")
            else:
                print("‚ö†Ô∏è  La colonne 'token' n'existe pas dans Heritage")
            
            conn.close()
        except Exception as e:
            print(f"‚ùå Erreur lecture Heritage: {e}")
    
    return all_tokens

def find_token(token_search):
    """Recherche un token sp√©cifique"""
    found = False
    
    # Recherche dans Multi-format
    if os.path.exists(DATABASE_MULTI):
        try:
            conn = sqlite3.connect(DATABASE_MULTI)
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT * FROM soumissions WHERE token = ?
            ''', (token_search,))
            
            result = cursor.fetchone()
            if result:
                print(f"\n‚úÖ TOKEN TROUV√â dans Multi-format!")
                print(f"   Num√©ro: {result[1]}")
                print(f"   Client: {result[2]}")
                print(f"   Projet: {result[5]}")
                print(f"   Statut: {result[14]}")
                print(f"   URL: {BASE_URL}/?token={token_search}")
                found = True
            
            conn.close()
        except Exception as e:
            print(f"‚ùå Erreur recherche Multi-format: {e}")
    
    # Recherche dans Heritage
    if os.path.exists(DATABASE_HERITAGE):
        try:
            conn = sqlite3.connect(DATABASE_HERITAGE)
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT * FROM soumissions_heritage WHERE token = ?
            ''', (token_search,))
            
            result = cursor.fetchone()
            if result:
                print(f"\n‚úÖ TOKEN TROUV√â dans Heritage!")
                columns = ['id', 'numero', 'client_nom', 'projet_nom', 'montant_total', 
                          'statut', 'token', 'data', 'created_at', 'updated_at', 'lien_public']
                data = dict(zip(columns, result))
                print(f"   Num√©ro: {data.get('numero')}")
                print(f"   Client: {data.get('client_nom')}")
                print(f"   Projet: {data.get('projet_nom')}")
                print(f"   Statut: {data.get('statut')}")
                print(f"   URL: {BASE_URL}/?token={token_search}")
                found = True
            
            conn.close()
        except Exception as e:
            print(f"‚ùå Erreur recherche Heritage: {e}")
    
    if not found:
        print(f"\n‚ùå Token '{token_search}' non trouv√© dans aucune base")
    
    return found

def export_all_links():
    """Exporte tous les liens clients dans un fichier"""
    tokens = list_all_tokens()
    
    if not tokens:
        print("\n‚ùå Aucun token trouv√©")
        return
    
    filename = f"liens_clients_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
    
    with open(filename, 'w', encoding='utf-8') as f:
        f.write("LISTE DES LIENS CLIENTS\n")
        f.write(f"G√©n√©r√© le: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        f.write("=" * 80 + "\n\n")
        
        # Grouper par statut
        for statut in ['en_attente', 'approuvee', 'refusee', None]:
            tokens_statut = [t for t in tokens if t['statut'] == statut]
            
            if tokens_statut:
                statut_label = statut or 'Sans statut'
                f.write(f"\n{statut_label.upper()} ({len(tokens_statut)} soumissions)\n")
                f.write("-" * 80 + "\n")
                
                for token in tokens_statut:
                    f.write(f"\nNum√©ro: {token['numero']}\n")
                    f.write(f"Client: {token['client']}\n")
                    f.write(f"Projet: {token['projet']}\n")
                    f.write(f"Date: {token['date']}\n")
                    f.write(f"Source: {token['source']}\n")
                    f.write(f"Lien: {token['url']}\n")
                    f.write("-" * 40 + "\n")
    
    print(f"\n‚úÖ Liens export√©s dans: {filename}")
    print(f"   Total: {len(tokens)} liens")

def check_token_from_url(url):
    """Extrait et v√©rifie un token depuis une URL"""
    if '?token=' in url:
        token = url.split('?token=')[1].split('&')[0]
        print(f"\nüîç Recherche du token: {token}")
        return find_token(token)
    else:
        print("\n‚ùå URL invalide - format attendu: ...?token=xxx-xxx-xxx")
        return False

def repair_missing_tokens():
    """Ajoute la colonne token si elle manque et g√©n√®re des tokens"""
    import uuid
    repairs = 0
    
    # R√©parer Heritage
    if os.path.exists(DATABASE_HERITAGE):
        try:
            conn = sqlite3.connect(DATABASE_HERITAGE)
            cursor = conn.cursor()
            
            # V√©rifier si la colonne token existe
            cursor.execute("PRAGMA table_info(soumissions_heritage)")
            columns = [col[1] for col in cursor.fetchall()]
            
            if 'token' not in columns:
                print("\nüîß Ajout de la colonne 'token' dans Heritage...")
                cursor.execute('ALTER TABLE soumissions_heritage ADD COLUMN token TEXT UNIQUE')
                conn.commit()
            
            # G√©n√©rer des tokens pour les soumissions qui n'en ont pas
            cursor.execute('SELECT id FROM soumissions_heritage WHERE token IS NULL')
            missing = cursor.fetchall()
            
            for (id_val,) in missing:
                new_token = str(uuid.uuid4())
                cursor.execute('UPDATE soumissions_heritage SET token = ? WHERE id = ?', 
                             (new_token, id_val))
                repairs += 1
            
            if repairs > 0:
                conn.commit()
                print(f"‚úÖ {repairs} tokens g√©n√©r√©s pour Heritage")
            
            conn.close()
        except Exception as e:
            print(f"‚ùå Erreur r√©paration Heritage: {e}")
    
    # R√©parer Multi-format
    if os.path.exists(DATABASE_MULTI):
        try:
            conn = sqlite3.connect(DATABASE_MULTI)
            cursor = conn.cursor()
            
            # G√©n√©rer des tokens pour les soumissions qui n'en ont pas
            cursor.execute('SELECT id FROM soumissions WHERE token IS NULL')
            missing = cursor.fetchall()
            
            for (id_val,) in missing:
                new_token = str(uuid.uuid4())
                cursor.execute('UPDATE soumissions SET token = ? WHERE id = ?', 
                             (new_token, id_val))
                repairs += 1
            
            if len(missing) > 0:
                conn.commit()
                print(f"‚úÖ {len(missing)} tokens g√©n√©r√©s pour Multi-format")
            
            conn.close()
        except Exception as e:
            print(f"‚ùå Erreur r√©paration Multi-format: {e}")
    
    return repairs

def main():
    """Fonction principale"""
    print("\nüîß UTILITAIRE DE R√âPARATION DES LIENS CLIENTS")
    print("=" * 60)
    
    # V√©rifier les bases
    check_databases()
    
    # Menu interactif
    while True:
        print("\n" + "=" * 60)
        print("OPTIONS DISPONIBLES:")
        print("=" * 60)
        print("1. Lister TOUS les liens clients")
        print("2. Rechercher un token sp√©cifique")
        print("3. V√©rifier une URL compl√®te")
        print("4. Exporter tous les liens dans un fichier")
        print("5. R√©parer les tokens manquants")
        print("6. Afficher les statistiques")
        print("0. Quitter")
        
        choice = input("\nVotre choix (0-6): ").strip()
        
        if choice == '0':
            break
        
        elif choice == '1':
            print("\nüìã LISTE DE TOUS LES LIENS CLIENTS")
            print("-" * 60)
            tokens = list_all_tokens()
            
            if tokens:
                print(f"\nTotal: {len(tokens)} liens trouv√©s\n")
                
                # Afficher les 10 derniers
                print("Les 10 derniers liens cr√©√©s:")
                print("-" * 60)
                for token in tokens[:10]:
                    print(f"\n{token['numero']} - {token['client']}")
                    print(f"  Projet: {token['projet']}")
                    print(f"  Statut: {token['statut']}")
                    print(f"  URL: {token['url']}")
                
                if len(tokens) > 10:
                    print(f"\n... et {len(tokens) - 10} autres")
        
        elif choice == '2':
            token = input("\nEntrez le token √† rechercher: ").strip()
            if token:
                find_token(token)
        
        elif choice == '3':
            url = input("\nCollez l'URL compl√®te: ").strip()
            if url:
                check_token_from_url(url)
        
        elif choice == '4':
            export_all_links()
        
        elif choice == '5':
            print("\nüîß R√©paration des tokens manquants...")
            repairs = repair_missing_tokens()
            if repairs > 0:
                print(f"\n‚úÖ {repairs} tokens r√©par√©s au total")
            else:
                print("\n‚úÖ Aucune r√©paration n√©cessaire")
        
        elif choice == '6':
            print("\nüìä STATISTIQUES")
            print("-" * 60)
            tokens = list_all_tokens()
            
            if tokens:
                # Par source
                multi = len([t for t in tokens if t['source'] == 'Multi-format'])
                heritage = len([t for t in tokens if t['source'] == 'Heritage'])
                
                print(f"Par source:")
                print(f"  - Multi-format: {multi}")
                print(f"  - Heritage: {heritage}")
                
                # Par statut
                print(f"\nPar statut:")
                for statut in ['en_attente', 'approuvee', 'refusee', None]:
                    count = len([t for t in tokens if t['statut'] == statut])
                    if count > 0:
                        statut_label = statut or 'Sans statut'
                        print(f"  - {statut_label}: {count}")
                
                print(f"\nTotal: {len(tokens)} soumissions avec liens")

if __name__ == "__main__":
    # Si un argument est pass√©, recherche directe
    if len(sys.argv) > 1:
        arg = sys.argv[1]
        print(f"\nüîç Recherche directe: {arg}")
        
        if arg.startswith('http'):
            check_token_from_url(arg)
        else:
            find_token(arg)
    else:
        # Mode interactif
        main()