"""
Script de test pour le syst√®me de gestion des bons de commande
Teste les fonctionnalit√©s principales du module bon_commande.py
"""

import os
import sys
import sqlite3
from datetime import datetime

# Ajouter le r√©pertoire du projet au chemin Python
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from bon_commande import (
        init_bon_commande_db,
        generer_numero_bon,
        sauvegarder_bon_commande,
        charger_bon_commande,
        lister_bons_commande,
        supprimer_bon_commande,
        dupliquer_bon_commande,
        generer_html_bon_commande
    )
    print("‚úÖ Module bon_commande import√© avec succ√®s")
except ImportError as e:
    print(f"‚ùå Erreur d'importation : {e}")
    sys.exit(1)

def test_database_initialization():
    """Test l'initialisation de la base de donn√©es"""
    print("\nüîß Test d'initialisation de la base de donn√©es...")
    
    try:
        init_bon_commande_db()
        
        # V√©rifier que le fichier de base de donn√©es existe
        if os.path.exists('data/bon_commande.db'):
            print("‚úÖ Base de donn√©es cr√©√©e avec succ√®s")
            
            # V√©rifier les tables
            conn = sqlite3.connect('data/bon_commande.db')
            cursor = conn.cursor()
            
            # V√©rifier la table bons_commande
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='bons_commande'")
            if cursor.fetchone():
                print("‚úÖ Table bons_commande cr√©√©e")
            else:
                print("‚ùå Table bons_commande manquante")
            
            # V√©rifier la table bon_commande_items
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='bon_commande_items'")
            if cursor.fetchone():
                print("‚úÖ Table bon_commande_items cr√©√©e")
            else:
                print("‚ùå Table bon_commande_items manquante")
            
            # V√©rifier la table bon_commande_attachments
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='bon_commande_attachments'")
            if cursor.fetchone():
                print("‚úÖ Table bon_commande_attachments cr√©√©e")
            else:
                print("‚ùå Table bon_commande_attachments manquante")
            
            conn.close()
        else:
            print("‚ùå Fichier de base de donn√©es non trouv√©")
            
    except Exception as e:
        print(f"‚ùå Erreur lors de l'initialisation : {e}")

def test_numero_generation():
    """Test la g√©n√©ration de num√©ros de bon"""
    print("\nüî¢ Test de g√©n√©ration de num√©ros...")
    
    try:
        numero1 = generer_numero_bon()
        numero2 = generer_numero_bon()
        
        print(f"‚úÖ Num√©ro g√©n√©r√© 1: {numero1}")
        print(f"‚úÖ Num√©ro g√©n√©r√© 2: {numero2}")
        
        # V√©rifier le format
        current_year = datetime.now().year
        if numero1.startswith(f'BC-{current_year}-'):
            print("‚úÖ Format de num√©ro correct")
        else:
            print("‚ùå Format de num√©ro incorrect")
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la g√©n√©ration : {e}")

def test_bon_commande_operations():
    """Test les op√©rations CRUD sur les bons de commande"""
    print("\nüìã Test des op√©rations sur les bons de commande...")
    
    try:
        # Cr√©er un bon de commande de test
        test_data = {
            'numeroBon': 'TEST-2025-001',
            'dateBon': datetime.now().strftime('%Y-%m-%d'),
            'entreprise': {
                'nom': 'Test Entreprise',
                'adresse': '123 Rue Test',
                'ville': 'Test-Ville (Qu√©bec) H1H 1H1',
                'tel': '514-123-4567',
                'cell': '438-123-4567',
                'email': 'test@exemple.com',
                'rbq': 'TEST-123',
                'neq': '123456789'
            },
            'fournisseur': {
                'nom': 'Fournisseur Test',
                'adresse': '456 Rue Fournisseur',
                'ville': 'Ville-Fournisseur',
                'codePostal': 'J2J 2J2',
                'tel': '450-987-6543',
                'cell': '514-987-6543',
                'contact': 'Jean Dupont'
            },
            'projet': {
                'nomClient': 'Client Test',
                'nomProjet': 'Projet Test',
                'lieu': 'Lieu Test',
                'refSoumission': 'REF-001',
                'chargeProjet': 'Manager Test'
            },
            'conditions': {
                'validite': '30 jours',
                'paiement': 'Net 30 jours',
                'dateDebut': '2025-01-01',
                'dateFin': '2025-01-31'
            },
            'signatures': {
                'auteur': 'Auteur Test',
                'dateAuteur': '2025-01-01',
                'fournisseur': 'Fournisseur Test',
                'dateFournisseur': '2025-01-02'
            },
            'items': [
                {
                    'id': 1,
                    'number': 1,
                    'title': 'Item Test 1',
                    'description': 'Description de l\'item de test 1',
                    'quantity': 2,
                    'unit': 'unit√©',
                    'unitPrice': 100.00,
                    'total': 200.00
                },
                {
                    'id': 2,
                    'number': 2,
                    'title': 'Item Test 2',
                    'description': 'Description de l\'item de test 2',
                    'quantity': 1,
                    'unit': 'forfait',
                    'unitPrice': 500.00,
                    'total': 500.00
                }
            ],
            'attachments': []
        }
        
        # Test de sauvegarde
        print("üíæ Test de sauvegarde...")
        bon_id = sauvegarder_bon_commande(test_data)
        if bon_id:
            print(f"‚úÖ Bon de commande sauvegard√© avec l'ID: {bon_id}")
        else:
            print("‚ùå Erreur lors de la sauvegarde")
            return
        
        # Test de chargement
        print("üìÇ Test de chargement...")
        loaded_data = charger_bon_commande('TEST-2025-001')
        if loaded_data:
            print("‚úÖ Bon de commande charg√© avec succ√®s")
            print(f"   - Num√©ro: {loaded_data['numeroBon']}")
            print(f"   - Fournisseur: {loaded_data['fournisseur']['nom']}")
            print(f"   - Nombre d'items: {len(loaded_data['items'])}")
        else:
            print("‚ùå Erreur lors du chargement")
            return
        
        # Test de listage
        print("üìã Test de listage...")
        bons_list = lister_bons_commande()
        if bons_list:
            print(f"‚úÖ {len(bons_list)} bon(s) de commande trouv√©(s)")
            for bon in bons_list:
                print(f"   - {bon.get('numero_bon')} ({bon.get('fournisseur_nom', 'Sans nom')})")
        else:
            print("‚ö†Ô∏è Aucun bon de commande trouv√©")
        
        # Test de duplication
        print("üìã Test de duplication...")
        nouveau_numero = dupliquer_bon_commande('TEST-2025-001')
        if nouveau_numero:
            print(f"‚úÖ Bon dupliqu√© avec le num√©ro: {nouveau_numero}")
            
            # V√©rifier que le nouveau bon existe
            duplicated_data = charger_bon_commande(nouveau_numero)
            if duplicated_data:
                print("‚úÖ Bon dupliqu√© charg√© avec succ√®s")
            else:
                print("‚ùå Erreur lors du chargement du bon dupliqu√©")
        else:
            print("‚ùå Erreur lors de la duplication")
        
        # Test de suppression du bon dupliqu√©
        if nouveau_numero:
            print("üóëÔ∏è Test de suppression du bon dupliqu√©...")
            if supprimer_bon_commande(nouveau_numero):
                print(f"‚úÖ Bon {nouveau_numero} supprim√© avec succ√®s")
            else:
                print(f"‚ùå Erreur lors de la suppression de {nouveau_numero}")
        
    except Exception as e:
        print(f"‚ùå Erreur lors des tests CRUD : {e}")
        import traceback
        traceback.print_exc()

def test_html_generation():
    """Test la g√©n√©ration HTML"""
    print("\nüåê Test de g√©n√©ration HTML...")
    
    try:
        # V√©rifier que le fichier template existe
        template_path = 'bon-commande-moderne.html'
        if not os.path.exists(template_path):
            print(f"‚ùå Template HTML non trouv√©: {template_path}")
            return
        
        # Charger un bon existant
        loaded_data = charger_bon_commande('TEST-2025-001')
        if not loaded_data:
            print("‚ùå Aucun bon de test disponible pour g√©n√©rer le HTML")
            return
        
        # G√©n√©rer le HTML
        html_content = generer_html_bon_commande(loaded_data)
        if html_content:
            print("‚úÖ HTML g√©n√©r√© avec succ√®s")
            print(f"   - Longueur: {len(html_content)} caract√®res")
            
            # V√©rifier quelques √©l√©ments cl√©s
            if 'BON DE COMMANDE' in html_content:
                print("‚úÖ Titre du bon pr√©sent")
            else:
                print("‚ùå Titre du bon manquant")
            
            if loaded_data['numeroBon'] in html_content:
                print("‚úÖ Num√©ro du bon pr√©sent")
            else:
                print("‚ùå Num√©ro du bon manquant")
            
        else:
            print("‚ùå Erreur lors de la g√©n√©ration HTML")
            
    except Exception as e:
        print(f"‚ùå Erreur lors du test HTML : {e}")

def cleanup_test_data():
    """Nettoie les donn√©es de test"""
    print("\nüßπ Nettoyage des donn√©es de test...")
    
    try:
        # Supprimer le bon de test
        if supprimer_bon_commande('TEST-2025-001'):
            print("‚úÖ Bon de test supprim√©")
        else:
            print("‚ö†Ô∏è Bon de test non trouv√© ou d√©j√† supprim√©")
            
    except Exception as e:
        print(f"‚ùå Erreur lors du nettoyage : {e}")

def main():
    """Fonction principale des tests"""
    print("üß™ TESTS DU SYST√àME DE GESTION DES BONS DE COMMANDE")
    print("=" * 60)
    
    # Cr√©er le dossier data s'il n'existe pas
    os.makedirs('data', exist_ok=True)
    
    # Ex√©cuter les tests
    test_database_initialization()
    test_numero_generation()
    test_bon_commande_operations()
    test_html_generation()
    cleanup_test_data()
    
    print("\n" + "=" * 60)
    print("üèÅ Tests termin√©s")

if __name__ == "__main__":
    main()