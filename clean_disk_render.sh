#!/bin/bash

# Script de nettoyage pour lib√©rer de l'espace sur Render
# √Ä ex√©cuter dans la console Shell de Render

echo "=========================================="
echo "üßπ Nettoyage du Disque Persistant Render"
echo "=========================================="
echo ""

# Afficher l'utilisation actuelle
echo "üìä Utilisation actuelle:"
df -h /opt/render/project/data
echo ""

# Analyser l'utilisation par dossier
echo "üìÅ R√©partition de l'espace:"
du -sh /opt/render/project/data/* 2>/dev/null | sort -rh | head -20
echo ""

# Nettoyer les vieux backups
echo "üóëÔ∏è Nettoyage des backups..."
BACKUP_DIR="/opt/render/project/data/backups"
if [ -d "$BACKUP_DIR" ]; then
    echo "Backups actuels:"
    ls -lah $BACKUP_DIR/*.tar.gz 2>/dev/null | tail -10
    
    # Supprimer les backups de plus de 7 jours
    find $BACKUP_DIR -name "backup_*.tar.gz" -mtime +7 -delete 2>/dev/null
    echo "‚úÖ Backups de plus de 7 jours supprim√©s"
    
    # Garder seulement les 5 derniers backups
    cd $BACKUP_DIR 2>/dev/null
    ls -t backup_*.tar.gz 2>/dev/null | tail -n +6 | xargs rm -f 2>/dev/null
    echo "‚úÖ Gard√© seulement les 5 derniers backups"
fi
echo ""

# Nettoyer les fichiers temporaires
echo "üóëÔ∏è Nettoyage des fichiers temporaires..."
find /opt/render/project/data -name "*.tmp" -delete 2>/dev/null
find /opt/render/project/data -name "*.log" -mtime +30 -delete 2>/dev/null
find /opt/render/project/data -name ".~lock.*" -delete 2>/dev/null
echo "‚úÖ Fichiers temporaires supprim√©s"
echo ""

# Analyser les gros fichiers
echo "üìä Les 10 plus gros fichiers:"
find /opt/render/project/data -type f -exec ls -lh {} \; 2>/dev/null | sort -k5 -rh | head -10
echo ""

# Compacter les bases de donn√©es SQLite
echo "üóÉÔ∏è Optimisation des bases de donn√©es..."
for db in /opt/render/project/data/*.db; do
    if [ -f "$db" ]; then
        SIZE_BEFORE=$(du -h "$db" | cut -f1)
        sqlite3 "$db" "VACUUM;" 2>/dev/null
        sqlite3 "$db" "ANALYZE;" 2>/dev/null
        SIZE_AFTER=$(du -h "$db" | cut -f1)
        echo "  - $(basename $db): $SIZE_BEFORE -> $SIZE_AFTER"
    fi
done
echo "‚úÖ Bases de donn√©es optimis√©es"
echo ""

# Analyser les fichiers upload√©s
echo "üì§ Fichiers upload√©s (files/):"
FILES_DIR="/opt/render/project/data/files"
if [ -d "$FILES_DIR" ]; then
    FILE_COUNT=$(find $FILES_DIR -type f | wc -l)
    FILE_SIZE=$(du -sh $FILES_DIR | cut -f1)
    echo "  - Nombre de fichiers: $FILE_COUNT"
    echo "  - Espace total: $FILE_SIZE"
    
    # Lister les plus gros fichiers upload√©s
    echo "  - Top 5 des plus gros fichiers:"
    find $FILES_DIR -type f -exec ls -lh {} \; | sort -k5 -rh | head -5
fi
echo ""

# R√©sultat final
echo "=========================================="
echo "‚úÖ Nettoyage termin√©!"
echo "=========================================="
echo ""
echo "üìä Utilisation apr√®s nettoyage:"
df -h /opt/render/project/data
echo ""

# Calculer l'espace lib√©r√©
USAGE_AFTER=$(df /opt/render/project/data | tail -1 | awk '{print $5}' | sed 's/%//')
echo "üíæ Espace utilis√©: ${USAGE_AFTER}%"

if [ "$USAGE_AFTER" -gt 90 ]; then
    echo ""
    echo "‚ö†Ô∏è ATTENTION: L'espace disque est toujours critique (>90%)!"
    echo "Actions recommand√©es:"
    echo "  1. Supprimer d'anciens fichiers upload√©s non utilis√©s"
    echo "  2. Exporter et archiver les vieilles soumissions"
    echo "  3. Augmenter la taille du disque dans Render (Settings > Disk)"
elif [ "$USAGE_AFTER" -gt 80 ]; then
    echo ""
    echo "‚ö†Ô∏è Attention: L'espace disque est √©lev√© (>80%)"
    echo "Surveillez r√©guli√®rement l'utilisation"
else
    echo ""
    echo "‚úÖ Espace disque OK (<80%)"
fi