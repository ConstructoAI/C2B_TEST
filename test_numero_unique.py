"""
Script de test pour v√©rifier le syst√®me de num√©rotation unique
"""

import sys
import os
import sqlite3
from datetime import datetime

# Ajouter le chemin au sys.path si n√©cessaire
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_numero_generation():
    """Test la g√©n√©ration de num√©ros uniques"""
    print("=" * 60)
    print("TEST DU SYST√àME DE NUM√âROTATION UNIQUE")
    print("=" * 60)
    
    # Test 1: Importer les modules
    print("\n[TEST 1] Import des modules...")
    try:
        from numero_manager import get_safe_unique_number, verify_number_uniqueness
        print("‚úÖ Module numero_manager import√©")
    except ImportError as e:
        print(f"‚ùå Erreur d'import: {e}")
        return False
    
    try:
        import app
        print("‚úÖ Module app import√©")
    except ImportError as e:
        print(f"‚ùå Erreur d'import: {e}")
        return False
    
    try:
        import soumission_heritage
        print("‚úÖ Module soumission_heritage import√©")
    except ImportError as e:
        print(f"‚ùå Erreur d'import: {e}")
        return False
    
    # Test 2: G√©n√©ration depuis app.py
    print("\n[TEST 2] G√©n√©ration depuis app.py...")
    try:
        numero_app = app.get_next_submission_number()
        print(f"‚úÖ Num√©ro g√©n√©r√©: {numero_app}")
        
        # V√©rifier l'unicit√©
        is_unique = verify_number_uniqueness(numero_app)
        if is_unique:
            print(f"‚úÖ Le num√©ro {numero_app} est unique")
        else:
            print(f"‚ùå Le num√©ro {numero_app} existe d√©j√†!")
            return False
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return False
    
    # Test 3: G√©n√©ration depuis soumission_heritage.py
    print("\n[TEST 3] G√©n√©ration depuis soumission_heritage.py...")
    try:
        numero_heritage = soumission_heritage.generate_numero_soumission()
        print(f"‚úÖ Num√©ro g√©n√©r√©: {numero_heritage}")
        
        # V√©rifier l'unicit√©
        is_unique = verify_number_uniqueness(numero_heritage)
        if is_unique:
            print(f"‚úÖ Le num√©ro {numero_heritage} est unique")
        else:
            print(f"‚ùå Le num√©ro {numero_heritage} existe d√©j√†!")
            return False
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return False
    
    # Test 4: V√©rifier que les num√©ros sont diff√©rents
    print("\n[TEST 4] V√©rification de l'incr√©mentation...")
    if numero_app != numero_heritage:
        print(f"‚úÖ Les num√©ros sont diff√©rents: {numero_app} != {numero_heritage}")
    else:
        print(f"‚ùå Les num√©ros sont identiques: {numero_app}")
        return False
    
    # Test 5: G√©n√©ration directe depuis numero_manager
    print("\n[TEST 5] G√©n√©ration directe depuis numero_manager...")
    try:
        numero_direct = get_safe_unique_number()
        print(f"‚úÖ Num√©ro g√©n√©r√©: {numero_direct}")
        
        if numero_direct not in [numero_app, numero_heritage]:
            print(f"‚úÖ Le num√©ro est diff√©rent des pr√©c√©dents")
        else:
            print(f"‚ùå Le num√©ro est identique √† un pr√©c√©dent")
            return False
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return False
    
    # Test 6: Simulation de cr√©ation simultan√©e
    print("\n[TEST 6] Simulation de cr√©ations simultan√©es...")
    numeros_generes = []
    
    for i in range(5):
        try:
            # Alterner entre les deux m√©thodes
            if i % 2 == 0:
                num = app.get_next_submission_number()
                source = "app.py"
            else:
                num = soumission_heritage.generate_numero_soumission()
                source = "heritage"
            
            if num in numeros_generes:
                print(f"‚ùå Doublon d√©tect√©: {num} (depuis {source})")
                return False
            
            numeros_generes.append(num)
            print(f"  ‚úÖ {source}: {num}")
        except Exception as e:
            print(f"‚ùå Erreur lors de la g√©n√©ration {i+1}: {e}")
            return False
    
    print(f"\n‚úÖ {len(numeros_generes)} num√©ros uniques g√©n√©r√©s sans conflit")
    
    return True

def check_existing_duplicates():
    """V√©rifie s'il existe des doublons dans les bases actuelles"""
    print("\n" + "=" * 60)
    print("V√âRIFICATION DES DOUBLONS EXISTANTS")
    print("=" * 60)
    
    all_numbers = []
    
    # V√©rifier dans Heritage
    try:
        if os.path.exists('data/soumissions_heritage.db'):
            conn = sqlite3.connect('data/soumissions_heritage.db')
            cursor = conn.cursor()
            cursor.execute('SELECT numero FROM soumissions_heritage')
            for row in cursor.fetchall():
                all_numbers.append(('Heritage', row[0]))
            conn.close()
    except:
        pass
    
    # V√©rifier dans Multi
    try:
        if os.path.exists('data/soumissions_multi.db'):
            conn = sqlite3.connect('data/soumissions_multi.db')
            cursor = conn.cursor()
            cursor.execute('SELECT numero_soumission FROM soumissions')
            for row in cursor.fetchall():
                all_numbers.append(('Multi', row[0]))
            conn.close()
    except:
        pass
    
    # Analyser
    seen = set()
    duplicates = []
    
    for source, numero in all_numbers:
        if numero in seen:
            duplicates.append(numero)
        seen.add(numero)
    
    if duplicates:
        print(f"\n‚ö†Ô∏è  {len(set(duplicates))} num√©ros en double trouv√©s:")
        for num in set(duplicates):
            count = sum(1 for s, n in all_numbers if n == num)
            print(f"  - {num} (appara√Æt {count} fois)")
        print("\nüí° Ex√©cutez 'python fix_duplicates.py' pour corriger")
        return False
    else:
        print("\n‚úÖ Aucun doublon trouv√© dans les bases existantes")
        return True

def main():
    """Fonction principale"""
    print("\nüî¨ TEST COMPLET DU SYST√àME DE NUM√âROTATION UNIQUE")
    print("=" * 60)
    
    # V√©rifier les doublons existants
    has_no_duplicates = check_existing_duplicates()
    
    # Tester la g√©n√©ration
    test_passed = test_numero_generation()
    
    # R√©sultats
    print("\n" + "=" * 60)
    print("R√âSULTATS DES TESTS")
    print("=" * 60)
    
    if test_passed and has_no_duplicates:
        print("\nüéâ TOUS LES TESTS SONT PASS√âS AVEC SUCC√àS!")
        print("\nLe syst√®me de num√©rotation unique fonctionne correctement.")
        print("Les deux modules utilisent maintenant la m√™me source de num√©rotation.")
    elif test_passed and not has_no_duplicates:
        print("\n‚ö†Ô∏è  Les tests de g√©n√©ration sont OK mais des doublons existent.")
        print("Ex√©cutez 'python fix_duplicates.py' pour nettoyer les donn√©es.")
    else:
        print("\n‚ùå Des erreurs ont √©t√© d√©tect√©es.")
        print("V√©rifiez les messages d'erreur ci-dessus.")
    
    # Informations suppl√©mentaires
    print("\n" + "=" * 60)
    print("INFORMATIONS SYST√àME")
    print("=" * 60)
    
    print(f"Date/Heure: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"Dossier de travail: {os.getcwd()}")
    
    if os.path.exists('data'):
        files = os.listdir('data')
        print(f"Fichiers dans data/: {', '.join(files)}")
    else:
        print("Le dossier data/ n'existe pas")

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        print(f"\n‚ùå Erreur inattendue: {e}")
        import traceback
        traceback.print_exc()
    
    input("\n\nAppuyez sur Entr√©e pour fermer...")